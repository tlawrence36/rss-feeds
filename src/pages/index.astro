---
import Layout from '../layouts/Layout.astro';
import Parser from 'rss-parser';
import { Image } from 'astro:assets';
import rssIcon from '../assets/rss-icon.svg';
import { feedSources } from '../store.js';

const parser = new Parser();

const sevenDaysAgo = new Date();
sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

interface FeedItem {
  feed?: string;
  category?: string;
  title?: string;
  description?: string;
  link?: string;
  date: Date;
  formattedDate?: string;
  formattedTime?: string;
}

const feedItems: FeedItem[] = [];
const feedNames: string[] = [];

await Promise.allSettled(
  feedSources.map(async (source) => {
    try {
      const feed = await parser.parseURL(source[2]);
	  feedNames.push(source[0]);
      feed.items.forEach((item) => {
        const date = item.pubDate ? new Date(item.pubDate) : undefined;
        if (date && date >= sevenDaysAgo) {
		  const fDate = date.toLocaleDateString('en-US');
		  const fTime = date.toLocaleTimeString('en-US');
          feedItems.push({
			feed: source[0],
            category: source[1],
            title: item.title,
			description: item.description,
            link: item.link,
			date,
            formattedDate: fDate,
			formattedTime: fTime,
          });
        }
      });
    } catch (error) {
      console.error(`Error fetching feed from ${source}:`, error);
    }
  })
);

const uniqueItems = feedItems.filter((item, index, array) => {
	return array.findIndex(p => p.title === item.title) === index;
});

const sortedFeedItems = uniqueItems.sort((a, b) => (b.date ?? new Date()).getTime() - (a.date ?? new Date()).getTime())

const uniqueFeedNames = feedNames.filter((item, index) => feedNames.indexOf(item) === index).sort();

// TODO:
// * open item in a modal on same page so I don't have to click between tabs
// * make page look better...bg image? color? mono font, ...?

---

<Layout title="RSS">

	<div id="slideout">
		<Image src={rssIcon} alt="RSS icon" class="icon"/>
		<div id='current'></div>
		<div id="slideout_inner">
			<ul>
				{uniqueFeedNames.map(item => (
					<li>{item}</li>
				))}
			</ul>
		</div>
	</div>

	<main>
		<!-- <div id='current'></div> -->
		<table>
			{sortedFeedItems
			// .filter(item => item.feed === currFeed)
			.map(item => (
				<tr data-id={item.feed}>
					<td class="date">{item.formattedDate}<span>({item.formattedTime})</span></td>
					{/* <td class="topic">{item?.feed?.substring(12)}</td> {/* handling NPR-specific feed names */}
					<td class="topic">{item.category || ''}</td>
					<td class="link"><a href={item.link} target="_blank">{item.title}</a></td>
				</tr>
			))}
		</table>
	</main>
</Layout>

<script>
	import { currentFeed } from '../store.js';

	function setCurrentFeed(feed:string): void {
		window.scrollTo({top: 0, behavior: 'smooth'});
		currentFeed.set(feed);
	}

	const elArray = document.querySelectorAll('li');
	elArray.forEach((e) => {
		const feedName = e.innerHTML;
		e.addEventListener('click', () => setCurrentFeed(feedName))
	});

	currentFeed.subscribe((feed: string) => {
		const allRows = document.querySelectorAll('tr');
		allRows.forEach((el) => el.classList.remove('show'));
		const rows = document.querySelectorAll(`tr[data-id=${feed}]`);
		rows.forEach((el) => el.classList.add('show'));
		const el = document.getElementById("current")!;
		el.innerHTML = feed;
	});
</script>

<style>
	html::-webkit-scrollbar { display: none; }
	body {
  		font-family: 'JetBrains Mono Variable', monospace;
  		background-image: url('../assets/icon-bg.jpg');
		-ms-overflow-style: none;  /* IE and Edge */
  		scrollbar-width: none;  /* Firefox */
	}
	body::-webkit-scrollbar {
  		display: none;
	}

	.icon {
		width: 32px;
		height: 32px;
		padding: 5px;
	}
	main {
		display: flex;
		justify-content: center;
	}
	table {
		display: flex;
		justify-content: center;
		margin: 25px 0;
		background: #cdeaf8;
		padding: 25px;
		opacity: .90;
		border-radius: 25px;
	}

	tr {
		display: none;
	}

	#current {
		transform: rotate(-90deg);
    	top: 44px;
    	position: relative;
		color: #fff;
	}

	.show {
		display: table;
	}

	.date {
		width: 200px;
		display: flex;
		align-items: center;
	}
	.date span {
		font-size: 12px;
		padding-left: 5px;
	}
	.topic {
		width: 150px;
		text-align: right;
		font-weight: 800;
	}
	.link {
		padding-left: 25px;
		width: 1200px;
	}
	#slideout {
		z-index: 1;
		position: fixed;
		top: 33px;
		left: 0;
		width: 45px;
		height: 139px;
		background: rgb(255 165 0);
		-webkit-transition-duration: 0.3s;
		-moz-transition-duration: 0.3s;
		-o-transition-duration: 0.3s;
		transition-duration: 0.3s;
		border-top-right-radius: 5px;
		border-bottom-right-radius: 5px;
	}
	#slideout_inner {
		background: rgb(273 153 0);
		position: fixed;
		top: 33px;
		left: -160px;
		width: 160px;
		/* padding: 25px; */
		height: auto;
		-webkit-transition-duration: 0.3s;
		-moz-transition-duration: 0.3s;
		-o-transition-duration: 0.3s;
		transition-duration: 0.3s;
		cursor: pointer;
		border-bottom-right-radius: 5px;
	}
	#slideout:hover {
		left: 157px;
	}
	#slideout:hover #slideout_inner {
		left: 0;
	}

	ul {
		list-style: none;
		color: #fff;
	}
	li:hover {
		color: #ddd;
	}
</style>