---
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';
import rssIcon from '../assets/rss-icon.svg';
import playIcon from '../assets/play.svg';
import pauseIcon from '../assets/pause.svg';
import closeIcon from '../assets/close.svg';
import articles from '../../feed.json';

const uniqueItems = articles.filter((item, index, array) => {
	return array.findIndex(p => p.title === item.title) === index;
});
const sortedFeedItems = uniqueItems.sort((a, b) => {
	const timeA = new Date(a.published);
	const timeB = new Date(b.published);
	return 	timeB.getTime() - timeA.getTime();
});

const uniqueFeedNames = [...new Set(articles.map(obj => obj.source))];
const uniqueCategoryNames = [...new Set(articles.map(obj => obj.category))];

const formatDate = (dateString:string) => {
	const date = new Date(dateString);
	return date.toLocaleDateString('en-US');
}

---

<Layout title="RSS">
	<div id="slideout">
		<Image src={rssIcon} alt="RSS icon" class="icon"/>
		<div id='current'></div>
		<div id="slideout_inner">
			<ul class="sources">
				{uniqueFeedNames.sort().map(item => (
					<li>{item}</li>
				))}
			</ul>
			<ul class="categories">
				{uniqueCategoryNames.sort().map(item => (
					<li>{item}</li>
				))}
			</ul>
			<div>
				<input id='search' type='text' value='' placeholder='search term' />
				<!-- <button id='clear'>X</button> -->
			</div>
		</div>
	</div>

	<main>
		<div class="wrapper">
		{sortedFeedItems
			.map(item => (
				<div class="item" data-category={item.category} data-feed={item.source}>
					<div class="date">{formatDate(item.published)}</div>
					<div class="topic">{item.category || ''}</div>
					<div class="link" data-id={item.id}>{item.title}</div>
				</div>
			))}
		</div>
	</main>

	<dialog>
		<div id='article_container'>
			<article id='article'>
				<div id='title'></div>
				<div id='controls'>
					<button id='speak'><Image src={playIcon} alt="Listen to article" class="icon"/></button>
					<button id='pause' disabled><Image src={pauseIcon} alt="Stop listening to article" class="icon"/></button>
					<button id='close'><Image src={closeIcon} alt="Close article" class="icon"/></button>
				</div>
				<div id='story'></div>
				<div id='origin_link'></div>
			</article>
		</div>
	</dialog>
</Layout>

<script>
	import articles from '../../feed.json';

	// Listeners...

	// article links
	const articleLinks = document.querySelectorAll('.link');
	articleLinks.forEach((e) => {
		const id = e.getAttribute('data-id') || '';
		e.addEventListener('click', () => displayArticle(id));
	});

	// side menu
	const elArray = document.querySelectorAll('ul.sources li');
	elArray.forEach((e) => {
		const feedName = e.innerHTML;
		e.addEventListener('click', () => setCurrentFeed(feedName))
	});

	// side menu categories
	const catListArray = document.querySelectorAll('ul.categories li');
	catListArray.forEach((e) => {
		const category = e.innerHTML!;
		e.addEventListener('click', () => setCurrentCategory(category))
	});

	// side menu search
	const search = document.getElementById('search') as HTMLInputElement;
	search?.addEventListener('keyup', () => displaySearchedArticles(search.value));

	// end of spoken articles
	const synthVoices = window.speechSynthesis;
	synthVoices.addEventListener('end', () => {
		document.querySelector("#speak")?.removeAttribute("disabled");
	});

	function setCurrentFeed(feed:string): void {
		const search = document.getElementById('search')! as HTMLInputElement;
		search.value = '';
		window.scrollTo({top: 0, behavior: 'smooth'});
		const allRows = document.querySelectorAll('div.item');
		allRows.forEach((el) => el.classList.remove('show'));
		const rows = document.querySelectorAll(`div[data-feed=${feed}]`);
		rows.forEach((el) => el.classList.add('show'));
		const el = document.getElementById("current")!;
		el.innerHTML = feed;
	}

	function setCurrentCategory(category:string): void {
		const search = document.getElementById('search')! as HTMLInputElement;
		search.value = '';
		window.scrollTo({top: 0, behavior: 'smooth'});
		const allRows = document.querySelectorAll('div.item');
		allRows.forEach((el) => el.classList.remove('show'));
		const rows = document.querySelectorAll(`div[data-category='${category}']`);
		rows.forEach((el) => el.classList.add('show'));
		const el = document.getElementById("current")!;
		el.innerHTML = category;
	}

	const displaySearchedArticles = (term:string) => {
		// no search term
		if (!term.length) {
			setCurrentFeed('ABC');
			return;
		}
		const isExclude = term.charAt(0) === '-';
		const actualTerm = isExclude ? term.substring(1) : term;
		window.scrollTo({top: 0, behavior: 'smooth'});
		// remove currently displayed articles
		const displayedRows = document.querySelectorAll('div.item');
		displayedRows.forEach((el) => el.classList.remove('show'));
		// find articles that include {term} in their title
		const allRows = document.querySelectorAll('div.item');
		allRows.forEach((row) => {
			const title = row.querySelector('div.link')?.innerHTML.toLowerCase();
			if (isExclude && !title?.includes(actualTerm)) {
				row.classList.add('show');
			} else if (!isExclude && title?.includes(actualTerm)) {
				row.classList.add('show');
			}
		});
		// update slide out to show term vs source
		const el = document.getElementById("current")!;
		el.innerHTML = actualTerm;
	}

	const startSpeaking = () => {
		const voices = window.speechSynthesis.getVoices().filter((v) => v.name === 'Aaron' || v.name === 'Cecil');
		const voice = Math.round(Math.random());
		const title = document?.getElementById('title')?.innerText;
		const text = document?.getElementById('story')?.innerText;
    	const verbalTitle = new SpeechSynthesisUtterance(title);
    	const verbalStory = new SpeechSynthesisUtterance(text);
		verbalStory.voice = voices[voice];
		verbalTitle.voice = voices[voice];
		// verbalStory.rate = 1;  // Speed of speech (1 is normal, 0.5 is slower, 2 is faster)
    	// verbalStory.pitch = 1; // Pitch of the voice (0 is low, 2 is high)
    	// verbalStory.volume = 1; // Volume level (0 is mute, 1 is full volume)
		synthVoices.speak(verbalTitle);
		synthVoices.speak(verbalStory);
	}

	const handleSpeaking = () => {
		document.querySelector("#speak")?.setAttribute("disabled", 'true');
		document.querySelector("#pause")?.removeAttribute("disabled");
		startSpeaking();
	}

	const handlePause = () => {
		if(synthVoices.paused) {
			synthVoices.resume();
		} else {
			synthVoices.pause();
		}
	}

	const displayArticle = (id:string) => {
		document.querySelector(`[data-id="${id}"]`)?.classList.add('visited');
		const dialog = document.querySelector("dialog")!;

		// close button listener
		const closeButton = document.querySelector("dialog button#close")!;
		closeButton.addEventListener("click", () => {
			synthVoices.cancel();
			document.querySelector("#speak")?.removeAttribute("disabled");
			listenButton.removeEventListener("click", handleSpeaking);
			pauseButton.removeEventListener("click", handlePause);
			dialog.close();
		});

		// listen button listener
		const listenButton = document.querySelector("dialog button#speak")!;
		listenButton.addEventListener("click", handleSpeaking);

		// pause button listener
		const pauseButton = document.querySelector("dialog button#pause")!;
		pauseButton.addEventListener("click", handlePause);

		const content = articles.find((article) => article.id === +id);
		const title = document.getElementById('title')!;
		title.innerHTML = `<h3 style='line-height:1.1;'>${content?.title}</h3>`;
		const story = document.getElementById('story')!;
		const article = document.getElementById('article')!;
		story.innerHTML = '';
		content?.story.forEach((line) => {
			story.innerHTML += `<p>${line}</p>`;
		});
		story.innerHTML += `<a href=${content?.link} target='_blank'}>View original article</a>`;
		dialog.showModal();
		article.scrollTo(0,0);
	}

	window.onload = function () {
		window.scrollTo({top: 0, behavior: 'smooth'});
		const initSource = articles[0].source;
		setCurrentFeed(initSource);
	}

	// window.onbeforeunload = () => {
	// 	console.log('leaving!');
	// }

</script>

<style>
	html::-webkit-scrollbar { display: none; }
	body {
  		font-family: 'JetBrains Mono Variable', monospace;
		background: rgb(15,105,170);
		background: linear-gradient(0deg, rgba(15,105,170,1) 0%, rgba(18,154,251,1) 100%);
		-ms-overflow-style: none;  /* IE and Edge */
  		scrollbar-width: none;  /* Firefox */
	}
	body::-webkit-scrollbar {
  		/* display: none; */
	}
	body:has(dialog[open]) {
		overflow: hidden;
	}

	.link {
		color: #666;
		text-decoration: none;
		cursor: pointer;
	}
	.link:hover {
		text-decoration: none;
		color: #000;
	}

	.link.visited {
		color:#FFA500;
	}
	.icon {
		width: 32px;
		height: 32px;
	}

	#controls {
		position: absolute;
    	right: 65px;
    	bottom: 15px;
		height: 40px;
	}
	#controls button {
		background: transparent;
	}
	#controls button:disabled {
		opacity: .5;
		cursor: default;
	}

	button {
		border: none;
		font-family: 'JetBrains Mono Variable';
		outline: none;
		cursor: pointer;
	}
	button:hover {
		text-decoration: underline;
	}
	main {
		display: flex;
		justify-content: center;
		margin: 0 50px 50px 50px;
		background: lightblue;
		opacity: 0.7;
		border-radius: 25px;
		border: 5px solid #fff;

	}
	.wrapper {
		width: 100%;
		padding: 25px;
		min-height: 90vh;
	}

	.item {
		width: inherit;
		display: none;
	}
	.show {
		display: grid;
		grid-template-columns: 100px 150px 1fr;
	}
	.date {
		width: inherit;
		grid-column-start: 1;
		font-size: 0.9rem;
	}
	.topic {
		width: inherit;
		grid-column-start: 2;
		font-size: 0.9rem;
		font-weight: 600;
		text-align: center;
	}
	.link {
		width: inherit;
		grid-column-start: 3;
	}

	/* "mobile second" for this site */
	@media only screen and (max-width: 992px) {
		main {
			margin: 0;
		}
		.link {
			grid-column-start: 2;
		}
		.topic {
			display: none;
		}
		#slideout {
			display: none;
		}
		.item {
			display: grid;
			grid-template-columns: 100px 1fr;
		}
		#speak,
		#pause {
			display: none;
		}
		#controls {
			position: absolute;
    		right: 16px;
    		top: 21px;
		}
	}

	@media only screen and (max-width: 992px) and (orientation: landscape) {
		button {
			padding-top: 5px;
			margin-top: 0;
		}
	}

/* slide out styles */
	#slideout {
		z-index: 1;
		position: fixed;
		top: 33px;
		left: 0;
		width: 45px;
		height: 200px;
		background: #FFA500;
		-webkit-transition-duration: 0.3s;
		-moz-transition-duration: 0.3s;
		-o-transition-duration: 0.3s;
		transition-duration: 0.3s;
		border-top-right-radius: 15px;
		border-bottom-right-radius: 15px;
	}
	#slideout_inner {
		background: #f90;
		position: fixed;
		top: 33px;
		left: -160px;
		width: 160px;
		min-height: 550px;
		-webkit-transition-duration: 0.3s;
		-moz-transition-duration: 0.3s;
		-o-transition-duration: 0.3s;
		transition-duration: 0.3s;
		cursor: pointer;
		border-bottom-right-radius: 20px;
	}
	#slideout:hover {
		left: 157px;
	}
	#slideout:hover #slideout_inner {
		left: 0;
	}
	#current {
		transform: rotate(-90deg);
    	top: 70px;
    	position: relative;
		color: #fff;
		width: 120px;
		left: -38px;
	}
	ul {
		list-style: none;
		color: #fff;
	}
	ul.categories {
		padding: 8px 3px 0;
		margin-bottom: 0;
		text-align: right;
		margin-right: 10px;
	}
	li:hover {
		color: #ddd;
	}

	input[type='text'] {
		font-family: 'JetBrains Mono Variable';
		font-size: 0.8rem;
		margin: 20px 0 0 10px;
		width: 75%;
		border-radius: 5px;
		border: 0;
		line-height: 2;
		padding-left: 9px;
	}
	input:focus-visible {
		border: none;
	}
	#clear {
		font-family: 'JetBrains Mono Variable';
		width: auto;
    	border: 3px solid orange;
    	border-radius: 8px;
		margin: 3px 0 3px 3px;
		height: 32px;
		padding: 0 5px;
	}
	#clear:hover {
		text-decoration: none;
	}

/* Dialog styles */
	dialog {
		width: 75%;
		border: none;
		background: transparent;
		overscroll-behavior: contain;
	}
	// dialog::-webkit-scrollbar {
  	// 	display: none;
	// }
	dialog::backdrop {
		background: rgba(0, 0, 0, 0.5);
	}

/* paper background */
	:root {
	--paper-color: hsl(0, 15%, 95%);
	--ink-color: hsl(0, 0%, 12%);
	--top-space: 3lh;
	}

	#article_container {
		background: var(--paper-color);
		padding: calc(var(--top-space) - 2.75lh) 3rem 1rem 2rem;
		color: var(--ink-color);
		border-radius: 15px;
		height: 84vh;
	}

	article {
		height: 80vh;
    	overflow-y: scroll;
		overscroll-behavior: contain;
		border-bottom: 1px solid lightgray;
	}

	article:focus-visible {
		outline: none;
	}

	article::-webkit-scrollbar { display: none; }

	@media only screen and (max-width: 640px) {
		dialog {
			width: 95%;
			height: 95%;
		}
	}

</style>